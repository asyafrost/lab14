// lab142.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
using namespace std;
int fibonacci(int num) 
{
    if (num == 0)
    {
        return 0;
    }
    if (num == 1) 
    {
        return 1;
    }
    return fibonacci(num - 1) + fibonacci(num - 2);
}
int main()
{
    int x;
    double Sum, p;
    int a, b, c, n, k, sum = 0;
    setlocale(LC_ALL, "");
    cout << "Введите номер задания: " << endl;
    cin >> x;
    switch (x)
    {
    case 1:
        cout << "Даны целые положительные числа A и B (A < B). Вывести все целые числа от A до B включительно; при этом каждое число должно выводиться столько раз, каково его значение (например, число 3 выводится 3 раза)." << endl;
        cout << "Введите два целых числа a и b (a < b):" << endl;
        cin >> a >> b;
        for (int i = a; i <= b; i++)
        {
            c = i;
            while (c != 0)
            {
                cout << i << " ";
                c--;
            }
            cout << endl;
        }
        break;

    case 2:
        cout << "Даны положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений). Не используя операции умножения и деления, найти длину незанятой части отрезка A." << endl;
        cout << "Введите два целых числа a и b (a>b):" << endl;
        cin >> a >> b;
        while (a > b)
        {
            a -= b;
        }
        cout << "Незанятая часть отрезка А равно: " << a;
        break;

    case 3:
        cout << "Дано целое число N (> 1). Вывести наименьшее из целых чисел K, для которых сумма 1 + 2 + . . . + K будет больше или равна N, и саму эту сумму." << endl;
        cout << "n (n>1):" << endl;
        cin >> n;
        k = 1;
        while (sum < n)
        {
            sum += k;
            k++;
        }
        cout <<"Сумма чисел до n равна "<< sum;
        break;

    case 4:
        cout << "Начальный вклад в банке равен 1000 руб. Через каждый месяц размер вклада увеличивается на P процентов от имеющейся суммы (P — вещественное число, 0 < P < 25). По данному P определить, через сколько месяцев размер вклада превысит 1100 руб., и вывести найденное количество месяцев K (целое число) и итоговый размер вклада S (вещественное число)." << endl;
        cout << "Введите вещественное число p (0<p<25): " << endl;
        cin >> p;
        p *= 0.01;
        cout << p << endl;
        Sum = 1000;
        k = 0;
        while (Sum <= 1100)
        {
            Sum = Sum + (Sum * p);
            k++;
        }
        cout << "Через " << k << " месяцев итоговый размер вклада равен " << Sum;
        break;

    case 5:
        cout << "Даны целые положительные числа A и B. Найти их наибольший общий делитель (НОД), используя алгоритм Евклида" << endl;
        cout << "Введите два целых положительных числа:" << endl;
        cin >> a >> b;
        while (a != 0 && b != 0)
        {
            if (a > b)
            {
                a %= b;
            }
            else
            {
                b %= a;
            }
        }
        cout << "Наибольший общий делитель этих чисел равен " << a + b;
        break;

    case 6:
        cout << "Дано целое число N (> 1), являющееся числом Фибоначчи: N = FK. Найти целое число K — порядковый номер числа Фибоначчи N." << endl;
        cout << "Введите число , являющееся числом Фибоначчи:" << endl;
        cin >> n;
        int i = 0;
        k = 1;
        while (fibonacci(i) != n)
        {
            k++;
            i++;
        }
        cout << "Ваше число является " << k<<"-ым в последовательности Фибоначчи.";
        break;
    }
    return 0;
 }
    



    
    

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
